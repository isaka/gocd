/*
 * Copyright Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer
import com.github.jk1.license.task.ReportTask
import com.thoughtworks.go.build.AdoptiumVersion
import com.thoughtworks.go.build.GoVersions
import com.thoughtworks.go.build.InstallerType
import de.undercouch.gradle.tasks.download.Download
import nl.javadude.gradle.plugins.license.License
import org.apache.tools.ant.filters.FixCrLfFilter
import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel

import java.security.SecureRandom
import java.util.stream.Collectors

plugins {
  id 'base'
  id 'org.owasp.dependencycheck' version '12.1.5'
  id 'com.autonomousapps.dependency-analysis' version '3.1.0'
  id 'org.barfuin.gradle.taskinfo' version '2.2.0'
  id 'com.github.hierynomus.license-base' version '0.16.1' apply false
  id 'com.github.jk1.dependency-license-report' version '2.9' apply false
}

apply from: 'dependencies.gradle'

if (file('build-ext.gradle').exists()) {
  apply from: 'build-ext.gradle'
}

// Updated via automated scripting
def GO_VERSION_PREVIOUS = '25.3.0'
def GO_VERSION_SEGMENTS = [year: 25, releaseInYear: 4, patch: 0]
def GO_VERSION_NEXT = '25.5.0'

def goVersions = new GoVersions(
  previousVersion: GO_VERSION_PREVIOUS,
  goVersion: [GO_VERSION_SEGMENTS.year, GO_VERSION_SEGMENTS.releaseInYear, GO_VERSION_SEGMENTS.patch].join('.'),
  nextVersion: GO_VERSION_NEXT,

  // Default target version. Can be overridden by sub-projects.
  targetJavaVersion: 17,

  // Version of JVM to compile and test using.
  buildJavaVersion: 21,

  // Version to package with installers and container images by default
  packagedJavaVersion: new AdoptiumVersion(
    feature: 21,
    interim: 0,    // set to `null` for the first release of a new featureVersion
    update: 8,    // set to `null` for the first release of a new featureVersion
    patch: null, // set to `null` for most releases. Patch releases are "exceptional".
    build: 9
  ),
)
ext.goVersions = goVersions
GoVersions.printGradleDebuggingOutputFor(gradle, goVersions)

allprojects {
  apply plugin: 'idea'
  apply plugin: 'com.autonomousapps.dependency-analysis'
  group = 'com.thoughtworks.go'
  version = goVersions.fullVersion
  layout.buildDirectory = "${projectDir}/target"

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url = 'https://repo.terracotta.org/maven2/' } // Needed for later ehcache repos
    maven { url = 'https://jitpack.io' } // Needed for spring-test-junit5 and jruby-rack
  }

  if (project.path.startsWith(':api:') && !project.path != ':api:api-base') {
    dependencyAnalysis {
      issues {
        onAny {
          // Ignore issues with dependencies on api-base, we rely on this to make API projects
          // easier to configure
          exclude(dependencies.project(path: ':api:api-base'))
        }
        onUsedTransitiveDependencies {
          // API projects use transitives from api-base rather than declaring everything directly
          severity('ignore')
        }
      }
    }
  }
}

idea {
  project {
    jdkName = goVersions.buildJavaVersion
    targetBytecodeVersion = JavaVersion.toVersion(goVersions.targetJavaVersion)
    languageLevel = new IdeaLanguageLevel(goVersions.targetJavaVersion)
  }
}

subprojects {
  if (!project.childProjects.isEmpty()) {
    return
  }
  apply plugin: 'base'
  apply plugin: 'com.github.hierynomus.license'
  license {
    skipExistingHeaders = false
    strictCheck = true
    exclude '**/.gitkeep'
    exclude '**/.tool-versions'
    exclude '**/*.enc'
    exclude '**/*.key'
    exclude '**/*.erb'
    exclude '**/*.ejs'
    exclude '**/*.keep'
    exclude '**/*.md'
    exclude '**/*.jar'
    exclude '**/*.json'
    exclude '**/*.html'
    exclude '**/*.zip'
    exclude '**/*.ico'
    exclude '**/*.png'
    exclude '**/*.jpg'
    exclude '**/*.jpeg'
    exclude '**/*.gif'
    exclude '**/*.woff'
    exclude '**/*.woff2'
    exclude '**/*.svg'
    exclude '**/*.json'
    exclude '**/*.pk1'
    exclude '**/*.pk8'
    exclude '**/*.crt'
    exclude '**/*.pass'
    exclude '**/*.p12'
    exclude '**/*.scss.d.ts'
    exclude '**/.*.json'
    exclude '**/*.lock'
    exclude '**/hg.template'
    exclude '**/available.toggles'
    exclude '**/META-INF/services/*'
    exclude '**/node_modules/**'
    exclude '**/node-vendor/**'
    exclude '**/vendor/**'
    exclude '**/javascripts/lib/**'
    exclude '**/gems/jruby/**'
    exclude '**/tmp/**'
    exclude '**/logs/**'
    exclude '**/log/**'
    exclude '**/robots.txt'
    exclude '**/rails/bin/**'
    exclude '**/rails/Gemfile*'
    exclude '**/rails/Rakefile*'
    exclude '**/rails/.babelrc'
    exclude '**/rails/.eslintignore'
    exclude '**/rails/.bundle/**'
    exclude '**/rails/.yarn/**'

    // Code borrowed from other projects
    exclude '**/JavaVersion.java'
    exclude '**/CommandLine.java'
    exclude '**/StreamPumper.java'
    exclude '**/StreamConsumer.java'
    exclude '**/RuntimeTypeAdapterFactory*.java'

    // used by intellij for type hints when editing ftl files, intellij gets confused if it sees a license header in this file
    exclude '**/freemarker_implicit.ftl'
    header = rootProject.file('build-platform/Apache-2.0.txt')
    headerDefinitions {
      intellijStyleXML {
        firstLine = "<!--"
        beforeEachLine = '  ~ '
        endLine = "  -->"
        afterEachLine = ''
        skipLinePattern = "^<\\?xml.*>\$"
        firstLineDetectionPattern = "(\\s|\\t)*<!--.*\$"
        lastLineDetectionPattern = ".*-->(\\s|\\t)*\$"
        allowBlankLines = true
        isMultiline = true
        padLines = false
      }

      intellijStyleFTL {
        firstLine = "<#--"
        beforeEachLine = ' '
        endLine = "  -->"
        afterEachLine = ''
        firstLineDetectionPattern = "(\\s|\\t)*<#--.*\$"
        lastLineDetectionPattern = ".*-->(\\s|\\t)*\$"
        allowBlankLines = true
        isMultiline = true
        padLines = false
      }
    }
    mapping {
      java = 'SLASHSTAR_STYLE'
      groovy = 'SLASHSTAR_STYLE'
      scss = 'SLASHSTAR_STYLE'
      sass = 'SLASHSTAR_STYLE'
      css = 'SLASHSTAR_STYLE'
      rb = 'SCRIPT_STYLE'
      rake = 'SCRIPT_STYLE'

      xml = 'intellijStyleXML'
      xsl = 'intellijStyleXML'
      xsd = 'intellijStyleXML'

      ftl = 'intellijStyleFTL'
      ftlh = 'intellijStyleFTL'
      ts = 'SLASHSTAR_STYLE'
      tsx = 'SLASHSTAR_STYLE'
      msx = 'SLASHSTAR_STYLE'
      js = 'SLASHSTAR_STYLE'
    }
  }
  check.dependsOn 'license'

  if (project.path.startsWithAny(":build-platform", ":installers", ":docker", ":release")) {
    return
  }

  final boolean hasJavaSources = !project.fileTree("src/main/java").files.isEmpty()
  if (project.path.startsWithAny(':server-launcher') || hasJavaSources) {
    apply plugin: 'com.github.jk1.dependency-license-report'

    licenseReport {
      renderers = [new JsonReportRenderer("index.json", false)]
      excludeGroups = ["com.thoughtworks.go"]
      filters = [new LicenseBundleNormalizer()]
      outputDir = layout.buildDirectory.dir("reports/dependency-license").get().asFile
      configurations = ['runtimeClasspath', 'packagingInLibDir']
    }

    tasks.withType(ReportTask).configureEach { ReportTask reportTask ->
      reportTask.outputs.cacheIf { true }
      configurations.each { config ->
        if (config.name in project.licenseReport.configurations) {
          reportTask.inputs.files(config)
        }
      }
    }
  }

  if (hasJavaSources) {
    apply plugin: 'java-library'

    layout.buildDirectory = "${projectDir}/target"

    configurations {
      packagingOnly
      extractedAtTopLevel { transitive = false }
      fatJarConfig
      testJavaAgents { transitive = false }
    }
    test.dependsOn configurations.testJavaAgents

    dependencies {
      // Force all sub-projects to have managed dependency versions for certain transitive dependencies
      implementation platform(project(':build-platform'))
      testJavaAgents("${project.deps.mockitoCore}:${project.versions.mockitoBom}")

      components {
        // workaround for Caffeine metadata declaring dependencies that are not needed at runtime
        withModule('com.github.ben-manes.caffeine:caffeine', { details ->
          details.allVariants {
            withDependencies { removeAll { it.name in ["jspecify", "error_prone_annotations"] } }
          }
        })
        withModule('com.google.code.gson:gson', { details ->
          details.allVariants {
            withDependencies { removeAll { it.name in ["error_prone_annotations"] } }
          }
        })
      }
    }
  }

  final boolean hasJavaTestFixtures = !project.fileTree("src/testFixtures").files.isEmpty()
  if (hasJavaTestFixtures) {
    apply plugin: 'java-test-fixtures'

    layout.buildDirectory = "${projectDir}/target"

    dependencies {
      // Force all sub-projects to have managed dependency versions for certain transitive dependencies
      testFixturesImplementation platform(project(':build-platform'))
    }
  }

  configurations.configureEach {
    resolutionStrategy {
      dependencySubstitution {
        substitute module("dom4j:dom4j") using module(project.deps.dom4j) because("Upgrade the legacy dom4j in old Hibernate 3.6; dom4j 2 should be sufficiently compatible")
        substitute module("javassist:javassist") using module(project.deps.javassist) because("Upgrade the legacy javassist in old Hibernate 3.6")
        substitute module("net.sf.ehcache:ehcache") using module(project.deps.ehcache) because("Use the much slimmer core artifact which is fine for our use case")
        substitute module("commons-logging:commons-logging") using module("${project.deps.slf4jJcl}:${project.versions.slf4jBom}") because("Replace commons-logging implementations with the slf4j apis that redirect logs to slf4j per https://www.slf4j.org/legacy.html")
        substitute module("com.bucket4j:bucket4j-core") using module(project.deps.bucket4j) because("Replace bucket4j-core with Java 17+ variant")

        substitute module("javax.annotation:javax.annotation-api") using module(project.deps.jakartaAnnotation) because("Javax Annotation has migrated to jakarta annotations")
        substitute module("javax.inject:javax.inject") using module(project.deps.jakartaInject) because("Javax Inject API has migrated to jakarta Inject API")
        substitute module("javax.servlet:javax.servlet-api") using module(project.deps.servletApi) because("Javax Servlet API has migrated to jakarta Servlet API")
        substitute module("org.eclipse.jetty.toolchain:jetty-servlet-api") using module(project.deps.servletApi) because("Javax Servlet API has migrated to jakarta Servlet API")
        substitute module("javax.transaction:jta") using module(project.deps.jakartaTransaction) because("Javax Transaction API has migrated to jakarta Transaction API")

        substitute module("org.hamcrest:hamcrest-core") using module(project.deps.hamcrest) because("Hamcrest core/library/all have been merged together: https://hamcrest.org/JavaHamcrest/distributables")
      }
    }
  }

  tasks.register('cleanLogs', Delete) {
    delete 'logs'
  }

  tasks.register('cleanApiOut', Delete) {
    delete 'out'
  }

  clean.dependsOn cleanLogs, cleanApiOut

  tasks.withType(Jar).configureEach { jarTask ->
    manifest {
      attributes(
        'Go-Version': project.version,
        'Go-Revision': goVersions.gitRevision,
        'Implementation-Title': project.name,
        'Implementation-Version': project.version
      )
    }

    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  }

  tasks.withType(AbstractArchiveTask).configureEach {
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  tasks.withType(Exec).configureEach {
    if (logger.isInfoEnabled()) {
      standardOutput = System.out
      errorOutput = System.err
    } else {
      standardOutput = new ByteArrayOutputStream()
      errorOutput = new ByteArrayOutputStream()
    }
  }

  tasks.withType(GroovyCompile).configureEach {
    options.incremental = true
  }

  tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << '-Werror'
    options.compilerArgs << '-Xlint:all,-serial,-deprecation,-processing,-this-escape,-classfile,-overloads'
    options.release.set(goVersions.targetJavaVersion as Integer)

    javaCompiler = javaToolchains.compilerFor {
      languageVersion = JavaLanguageVersion.of(goVersions.buildJavaVersion)
    }
  }

  tasks.withType(License).configureEach { License thisTask ->
    // Needs to be be done after evaluation for the task's source to be populated (either in afterEvaluate or doFirst)
    doFirst {
      def sourceSetName = thisTask.name.replaceFirst('licenseFormat', '').replaceFirst('license', '')
      def mappedSourceSet = sourceSets.find { sourceSet -> sourceSet.name.toLowerCase().equals(sourceSetName.toLowerCase()) } as SourceSet

      // Test resources are often just data files, and don't need license headers
      if (thisTask.name.toLowerCase().contains('test')) {
        thisTask.source -= mappedSourceSet.resources
      }
    }
  }

  tasks.withType(Test).configureEach { Test testTask ->
    dependsOn 'jar'

    testTask.useJUnitPlatform()
    javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(goVersions.buildJavaVersion)
    }

    def allTestClasses

    maxParallelForks = project.hasProperty('maxParallelForks') ? project.maxParallelForks as int : 1

    // fixup a tempdir that is predictable and we can clean it up later
    def tmpDir = project.file("${System.getProperty('java.io.tmpdir')}/gocd-tests/${new BigInteger(32, new SecureRandom()).toString(32)}")
    systemProperty 'java.io.tmpdir', tmpDir
    jvmArgs += testTask.project.name.startsWith("agent") ? InstallerType.agent.jvmModuleOpensArgs : InstallerType.server.jvmModuleOpensArgs
    jvmArgs += testTask.project.configurations.hasProperty('testJavaAgents') ? ["-javaagent:${testTask.project.configurations.testJavaAgents.asPath}", "-XX:-PrintWarnings"] : []

    doFirst {
      classpath += rootProject.findProject(':test:test-utils').files("resource-include-in-all-projects")
    }

    defaultCharacterEncoding = "UTF-8"
    failOnNoDiscoveredTests = FilePartition.partitioningDisabled

    doFirst {
      logger.info("Setting tmpdir ${tmpDir}")
      delete(tmpDir)
      tmpDir.mkdirs()

      List<String> files = []
      testTask.testClassesDirs.files.each { File classDir ->
        if (classDir.exists()) {
          classDir.eachFileRecurse(groovy.io.FileType.FILES) { f ->
            def relPath = new File(classDir.toURI().relativize(f.toURI()).toString()).toString().replaceAll(/\$.*/, '.*').replaceAll(/\.class/, '.*')
            if (relPath.endsWith("Test.*")) files << relPath
          }
        }
      }
      files = files.unique()

      def partition = new FilePartition(files)
      def testsToRun = partition.currentFiles()
      allTestClasses = getTestClassesForTask(testsToRun)
      partition.logTo(rootProject.logger)

      (files - testsToRun).each { f ->
        testTask.exclude f
      }
      testsToRun.each { f ->
        testTask.include f
      }
    }

    beforeTest { TestDescriptor test ->
      allTestClasses.remove(test.className)
    }

    beforeSuite { TestDescriptor test ->
      allTestClasses.remove(test.className)
    }

    doLast {
      delete(tmpDir)

      if (!allTestClasses.empty && !filter.includePatterns.empty) {
        throw new GradleException("Missed the following classes to test: ${allTestClasses}".toString())
      }
    }

    testLogging {
      showStandardStreams = project.path != ':server'

      exceptionFormat = 'full'

      beforeSuite { suite ->
        if (suite.parent) {
          logger.quiet("Running ${suite.name}")
        }
      }

      afterSuite { suite, result ->
        if (suite.parent) {
          logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
          if (result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Test ${suite.name} FAILED")
          }
        } else {
          logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        }
      }
    }
  }

  tasks.withType(Delete).configureEach { Delete deleteTask ->
    idea {
      module {
        excludeDirs += deleteTask.targetFiles
      }
    }
  }
}

tasks.register('allDependencies') {
  dependsOn allprojects.collect { "$it.path:dependencies" }

  description = "Print dependency tree of all projects"
}

private allCompileTasks(Closure<Boolean> include = { t -> true }) {
  allprojects.collect { Project prj ->
    compileAll.dependsOn(prj.getTasks().withType(JavaCompile).findAll(include))
    compileAll.dependsOn(prj.getTasks().withType(GroovyCompile).findAll(include))
  }
}

tasks.register('compileAll') { compileAllTask ->
  group = LifecycleBasePlugin.BUILD_GROUP
  allCompileTasks()
}

tasks.register('prepare') {
  group = LifecycleBasePlugin.BUILD_GROUP
  allCompileTasks { Task task -> !task.name.toLowerCase().contains('test') && !task.project.path.toLowerCase().contains('test') }
}

tasks.register('sparkTest') { thisTask ->
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  description = "Run all api tests"
  (project(':api').subprojects + project(':spark').subprojects).each { Project subPrj ->
    thisTask.dependsOn subPrj.tasks.withType(Test)
  }
  finalizedBy 'sparkTestJunitHtmlReport'
}

tasks.register('sparkTestJunitHtmlReport', TestReport) {
  dependsOn sparkTest

  testResults.from(project(':api').subprojects*.test.binaryResultsDirectory.locationOnly)
  testResults.from(project(':spark').subprojects*.test.binaryResultsDirectory.locationOnly)
  destinationDirectory = layout.buildDirectory.dir("reports/tests/sparkTest")
}

private void forAllTask(Closure<Task> closure) {
  subprojects.each { Project subPrj ->
    subPrj.tasks.withType(Test).each { eachTestTask ->
      if (!(eachTestTask.path in [':server:integrationTest'])) {
        closure.call(eachTestTask)
      }
    }
  }
}

tasks.register('allTests') { thisTask ->
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  description = "Run all tests"

  forAllTask { Test eachTestTask ->
    thisTask.dependsOn eachTestTask
  }

  finalizedBy 'allTestsJunitHtmlReport'
}

tasks.register('allTestsJunitHtmlReport', TestReport) { TestReport thisTask ->
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  description = "Run all api tests"

  forAllTask { Test eachTestTask ->
    testResults.from(eachTestTask.binaryResultsDirectory.locationOnly)
    eachTestTask.finalizedBy(thisTask)
  }
  destinationDirectory = layout.buildDirectory.dir("reports/tests/allTests")
}

static def toCamelCase(String input) {
  return input.split("[^a-zA-Z0-9]").collect { it.capitalize() }.join("")
}

static List<String> getTestClassesForTask(List<String> testsToRun) {
  return testsToRun.stream()
    .filter { testToRun -> !testToRun.matches(".*[/|\\\\].*Abstract.*Test.*") }
    .filter { testToRun -> testToRun.endsWith("Test.*") }
    .map { testToRun -> testToRun.replaceAll(".\\*", "").replaceAll("[^\\w.*]", ".") }
    .collect(Collectors.toList())
}

dependencyAnalysis {
  abi {
    exclusions {
      // Disable ABI analysis, as GoCD does not model module visibility correctly.
      excludeClasses(/com\.thoughtworks\.go\..*/)
    }
  }
  issues {
    all {
      onAny {
        exclude(project.deps.slf4jApi as String)
      }
      onCompileOnly {
        exclude(project.deps.jakartaAnnotation as String) // Spring needs at runtime
      }
      onIncorrectConfiguration {
      }
      onUsedTransitiveDependencies {
        // Exclude critical parts of frameworks which are annoying to declare individually
        excludeRegex(/.*:.*core/)
        excludeRegex(/org.springframework:spring-(core|beans)/)
      }

    }

  }
}

dependencyCheck {
  failBuildOnCVSS = 1
  failBuildOnUnusedSuppressionRule = true
  suppressionFile = rootProject.file('build-platform/dependency-check-suppress.xml').toPath().toString()
  skipTestGroups = true

  nvd.apiKey = System.getenv("NVD_API_KEY") ?: ""
  analyzers.ossIndex.username = System.getenv("OSS_INDEX_USERNAME") ?: ""
  analyzers.ossIndex.password = System.getenv("OSS_INDEX_API_KEY") ?: ""

  analyzers.assemblyEnabled = false // Avoid dotnet false positives
  analyzers.retirejs.filterNonVulnerable = true // Reduces effort/memory processing retirejs results
}

dependencyCheckAggregate {
  def injected = project.objects.newInstance(Injected)
  doFirst {
    injected.execOps.exec {
      commandLine = [ "gem", "install", "bundler-audit", "--no-document" ]
      standardOutput = System.out
      errorOutput = System.err
    }
    injected.execOps.exec {
      commandLine = [ "bundle", "audit", "update" ]
      standardOutput = System.out
      errorOutput = System.err
    }
  }
}

dependencyCheck {
  data.directory = layout.buildDirectory.dir("dependency-check-data").get()
}

tasks.register('downloadDependencyCheckCache', Download) {
  src 'https://nexus.gocd.io/repository/cache/dependency-check-data.zip'
  dest layout.buildDirectory.file('dependency-check-data.zip')
  onlyIfModified true
  tempAndMove true
  validateStatus { it < 500 } // Continue on failure
}

tasks.register('unzipDependencyCheckCache', Copy) {
  dependsOn downloadDependencyCheckCache
  onlyIf { downloadDependencyCheckCache.dest.length() > 100 * 1024 }
  from zipTree(downloadDependencyCheckCache.dest)
  into layout.buildDirectory.dir("dependency-check-data")
  def copyDetails = []
  eachFile { copyDetails << it }
  doLast {
    copyDetails.each { FileCopyDetails details ->
      def target = new File(destinationDir, details.path)
      if (target.exists()) {
        target.setLastModified(details.lastModified)
      }
    }
  }
}

dependencyCheckUpdate.dependsOn unzipDependencyCheckCache
dependencyCheckAnalyze.dependsOn unzipDependencyCheckCache
dependencyCheckAggregate.dependsOn unzipDependencyCheckCache

if (System.getenv().containsKey("NEXUS_CACHE_USERNAME")) {
  tasks.register('uploadDependencyCheckCache', Zip) {
    from layout.buildDirectory.file("dependency-check-data")
    archiveFileName = "dependency-check-data-updated.zip"
    destinationDirectory = layout.buildDirectory

    def injected = project.objects.newInstance(Injected)
    doLast {
      injected.execOps.exec {
        workingDir = projectDir
        commandLine = [
          "curl",
          "-u", "${System.getenv("NEXUS_CACHE_USERNAME")}:${System.getenv("NEXUS_CACHE_PASSWORD")}",
          "--include",
          "--upload-file", uploadDependencyCheckCache.archiveFile.get(), 'https://nexus.gocd.io/repository/cache/dependency-check-data.zip'
        ]
        standardOutput = System.out
        errorOutput = System.err
        ignoreExitValue = true
      }
    }
  }

  dependencyCheckUpdate.finalizedBy uploadDependencyCheckCache
  dependencyCheckAnalyze.finalizedBy uploadDependencyCheckCache
  dependencyCheckAggregate.finalizedBy uploadDependencyCheckCache
}

tasks.register('newSPA') {
  description = "Helper to create a new SPA. Pass `-PspaName=maintenance_mode"

  doFirst {
    def spaName = project.spaName
    def entityName = toCamelCase(spaName)
    def modelsBase = "${project(':server').webAppDir}/WEB-INF/rails/webpack/models/${spaName}"
    def pagesBase = "${project(':server').webAppDir}/WEB-INF/rails/webpack/views/pages"
    def widgetBase = "${pagesBase}/${spaName}"
    def mountPoint = "${project(':server').webAppDir}/WEB-INF/rails/webpack/single_page_apps"

    delete(modelsBase, widgetBase)
    mkdir(modelsBase)
    mkdir(widgetBase)

    def licenseHeader =
      """
      * Copyright Thoughtworks, Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *     http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      """.stripIndent().trim()

    def javaOrJavaScriptLicenseHeader = "/*\n${licenseHeader.split('\n').collect { eachLine -> " ${eachLine}" }.join("\n")}\n */\n\n"

    file("${mountPoint}/${spaName}.tsx").withWriter { out ->
      def contents =
        """
          import {SinglePageAppBase} from "helpers/spa_base";
          import {${entityName}Page} from "views/pages/${spaName}";

          export class ${entityName}SPA extends SinglePageAppBase {
            constructor() {
              super(${entityName}Page);
            }
          }

          //tslint:disable-next-line
          new ${entityName}SPA();
        """
      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + "\n")
    }

    file("${pagesBase}/${spaName}.tsx").withWriter { out ->
      def contents =
        """
          import m from "mithril";
          import {${entityName}} from "models/${spaName}/${spaName}";
          import {${entityName}Widget} from "views/pages/${spaName}/${spaName}_widget";
          import {Page} from "views/pages/page";

          interface State {
            dummy?: ${entityName};
          }

          export class ${entityName}Page extends Page<null, State> {
            componentToDisplay(vnode: m.Vnode<null, State>): m.Children {
              return <${entityName}Widget/>;
            }

            pageName(): string {
              return "SPA Name goes here!";
            }

            fetchData(vnode: m.Vnode<null, State>): Promise<any> {
              // to be implemented
              return Promise.resolve();
            }
          }
        """
      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + "\n")
    }

    file("${widgetBase}/${spaName}_widget.tsx").withWriter { out ->
      def contents =
        """
          import {MithrilViewComponent} from "jsx/mithril-component";
          import m from "mithril";
          import {${entityName}} from "models/${spaName}/${spaName}";

          interface Attrs {
            dummy?: ${entityName};
          }

          export class ${entityName}Widget extends MithrilViewComponent<Attrs> {
            view(vnode: m.Vnode<Attrs>) {
              return <div> This is widget</div>;
            }
          }
        """
      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + "\n")
    }

    file("${modelsBase}/${spaName}.ts").withWriter { out ->
      def contents =
        """
          interface EmbeddedJSON {
            dummy?: boolean;
            // to be implemented
          }

          interface ${entityName}JSON {
            _embedded: EmbeddedJSON;
          }

          export class ${entityName} {
            // to be implemented
            static fromJSON(data: ${entityName}JSON) {
              // to be implemented
            }
          }
        """
      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + "\n")
    }

    file("spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/${entityName}Controller.java").withWriter { out ->
      def contents =
        """
          package com.thoughtworks.go.spark.spa;
          import com.thoughtworks.go.spark.Routes;
          import com.thoughtworks.go.spark.SparkController;
          import com.thoughtworks.go.spark.spring.SPAAuthenticationHelper;
          import spark.ModelAndView;
          import spark.Request;
          import spark.Response;
          import spark.TemplateEngine;

          import java.util.Map;

          import static spark.Spark.*;

          public class ${entityName}Controller implements SparkController {
            private final SPAAuthenticationHelper authenticationHelper;
            private final TemplateEngine engine;
            public ${entityName}Controller(SPAAuthenticationHelper authenticationHelper, TemplateEngine engine) {
              this.authenticationHelper = authenticationHelper;
              this.engine = engine;
            }

            @Override
            public String controllerBasePath() {
                  return Routes.${entityName}.SPA_BASE;
            }

            @Override
            public void setupRoutes() {
               path(controllerBasePath(), () -> {
                  before("", authenticationHelper::checkAdminUserAnd403);
                  get("", this::index, engine);
              });
            }
            public ModelAndView index(Request request, Response response) {
                Map<String, Object> object = Map.of(
                    "viewTitle", "${entityName}"
                );
                return new ModelAndView(object, null);
            }
          }
        """
      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + "\n")
    }

    addUrlRewriteRule("${spaName} UI")

    List<String> lines = file('spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/spring/SpaControllers.java').readLines()
    def insertionIdx = lines.findIndexOf { l -> (l =~ /^\s*sparkControllers.add/).find() }
    lines.add(insertionIdx, "\t\tsparkControllers.add(new ${entityName}Controller(authenticationHelper, templateEngineFactory.create(${entityName}Controller.class, () -> COMPONENT_LAYOUT_PATH)));")

    file('spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/spring/SpaControllers.java').withWriter { out ->
      out.println(lines.join("\n").trim() + "\n")
    }

    addRoute(entityName, spaName)
  }
}

tasks.register('removeApi') {
  description = "Helper to create a delete an api module. Pass `-PapiName=roles-config -PapiVersion=v1`"
  def injected = project.objects.newInstance(Injected)

  doFirst {
    def apiName = project.apiName
    def newProjectName = "api-${apiName}-${project.apiVersion}"
    def moduleDir = file("api/${newProjectName}")
    def packageName = "com.thoughtworks.go.api${project.apiVersion}.${apiName.replaceAll(~/[^a-zA-Z]/, '')}"

    delete(moduleDir)

    List<String> springConfigContents = file("server/src/main/resources/applicationContext-global.xml").readLines("utf-8")
    file("server/src/main/resources/applicationContext-global.xml").withWriter { out ->
      def newContents = springConfigContents
        .stream()
        .filter({ eachLine -> !eachLine.contains("base-package=\"${packageName}\"") })
        .collect(Collectors.joining("\n"))
        .trim() + "\n"
      out.println(newContents)
    }

    List<String> settingsFileContents = file('settings.gradle').readLines("utf-8")
    file('settings.gradle').withWriter { out ->
      def newContents = settingsFileContents
        .stream()
        .filter({ eachLine -> !eachLine.contains("':api:${newProjectName}'") })
        .collect(Collectors.joining("\n"))
        .trim() + "\n"
      out.println(newContents)
    }

    List<String> gitIgnoreFileContents = file('.gitignore').readLines("utf-8")
    file('.gitignore').withWriter { out ->
      def newContents = gitIgnoreFileContents
        .stream()
        .filter({ eachLine -> !eachLine.startsWith("api/${newProjectName}/") })
        .collect(Collectors.joining("\n"))
        .trim() + "\n"
      out.println(newContents)
    }

    injected.execOps.exec {
      commandLine = ['git', 'add', '-u']
    }

    injected.execOps.exec {
      commandLine = ['git', 'commit', '-m', "Removed ${apiName} version ${project.apiVersion}"]
    }
  }
}

tasks.register('newApi') {
  description = "Helper to create a new api module. Pass `-PapiName=roles-config -PapiVersion=v1`"

  doFirst {
    def apiName = project.apiName
    def newProjectName = "api-${apiName}-${project.apiVersion}"
    def oldProjectName = "api-${apiName}-v${project.apiVersion.replaceFirst('v', '').toInteger() - 1}"
    def oldModuleDir = file("api/${oldProjectName}")
    delete(oldModuleDir)
    if (oldModuleDir.exists()) {
      throw new GradleException("Please use `upgradeApi` task instead of `newApi`")
    }
    def moduleDir = file("api/${newProjectName}")
    def basePackage = "${moduleDir}/src/main/java/com/thoughtworks/go/api${project.apiVersion}/${apiName.replaceAll(~/[^a-zA-Z]/, '')}"
    def testPackage = "${moduleDir}/src/test/groovy/com/thoughtworks/go/api${project.apiVersion}/${apiName.replaceAll(~/[^a-zA-Z]/, '')}"
    def packageName = "com.thoughtworks.go.api${project.apiVersion}.${apiName.replaceAll(~/[^a-zA-Z]/, '')}"
    def entityClassName = toCamelCase(apiName)
    def entityVariableName = entityClassName.uncapitalize()
    def controllerClassName = "${entityClassName}Controller${project.apiVersion.capitalize()}"

    delete(moduleDir)
    moduleDir.mkdirs()
    mkdir(basePackage)
    mkdir(testPackage)

    file("${moduleDir}/build.gradle").withWriter { out ->
      def contents =
        """
          /*
           * Copyright Thoughtworks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */

          plugins {
            id 'groovy'
          }

          dependencies {
            implementation project(':api:api-base')

            testImplementation(testFixtures(project(":api:api-base")))

            testImplementation project.deps.junit5Api
            testRuntimeOnly project.deps.junit5Engine
            testRuntimeOnly project.deps.junit5PlatformLauncher
          }
        """
      out.println(contents.stripIndent().trim() + "\n")
    }

    file("${basePackage}/${controllerClassName}.java").withWriter { out ->
      def contents =
        """
          /*
           * Copyright Thoughtworks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */

          package ${packageName};

          import com.thoughtworks.go.api.ApiController;
          import com.thoughtworks.go.api.ApiVersion;
          import com.thoughtworks.go.api.CrudController;
          import com.thoughtworks.go.api.base.OutputWriter;
          import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;
          import com.thoughtworks.go.config.exceptions.EntityType;
          import com.thoughtworks.go.config.exceptions.HttpException;
          import com.thoughtworks.go.server.service.EntityHashingService;
          import com.thoughtworks.go.spark.spring.SparkSpringController;
          import org.springframework.beans.factory.annotation.Autowired;
          import org.springframework.stereotype.Component;
          import spark.Request;
          import spark.Response;

          import java.io.IOException;
          import java.util.function.Consumer;

          import static spark.Spark.*;

          @Component
          public class ${controllerClassName} extends ApiController implements SparkSpringController, CrudController<${entityClassName}> {

              private final ApiAuthenticationHelper apiAuthenticationHelper;
              private final EntityHashingService entityHashingService;

              @Autowired
              public ${controllerClassName}(ApiAuthenticationHelper apiAuthenticationHelper, EntityHashingService entityHashingService) {
                  super(ApiVersion.${project.apiVersion});
                  this.apiAuthenticationHelper = apiAuthenticationHelper;
                  this.entityHashingService = entityHashingService;
              }

              @Override
              public String controllerBasePath() {
                  return Routes.${entityClassName}.BASE;
              }

              @Override
              public void setupRoutes() {
                  path(controllerBasePath(), () -> {
                      // uncomment the line below to set the content type on the base path
                      // before("", mimeType, this::setContentType);
                      // uncomment the line below to set the content type on nested routes
                      // before("/*", mimeType, this::setContentType);

                      // uncomment for the `index` action
                      // get("", mimeType, this::index);

                      // change the line below to enable appropriate security
                      before("", mimeType, this.apiAuthenticationHelper::checkAdminUserAnd403);
                      // to be implemented
                  });
              }

              // public String index(Request request, Response response) throws IOException {
              //    ${entityClassName} ${entityVariableName} = fetchEntityFromConfig(request.params(":id"));
              //    return writerForTopLevelObject(request, response, outputWriter -> ${entityClassName}sRepresenter.toJSON(outputWriter, ${entityVariableName}));
              // }


              @Override
              public String etagFor(${entityClassName} entityFromServer) {
                  return entityHashingService.hashForEntity(entityFromServer);
              }

              @Override
              public EntityType getEntityType() {
                  return EntityType.${entityClassName};
              }

              @Override
              public ${entityClassName} doFetchEntityFromConfig(String name) {
                  return someService.getEntity(name);
              }

              @Override
              public ${entityClassName} buildEntityFromRequestBody(Request req) {
                JsonReader jsonReader = GsonTransformer.getInstance().jsonReaderFrom(req.body());
                return ${entityClassName}Representer.fromJSON(jsonReader);
              }

              @Override
              public Consumer<OutputWriter> jsonWriter(${entityClassName} ${entityVariableName}) {
                  return outputWriter -> ${entityClassName}Representer.toJSON(outputWriter, ${entityVariableName});
              }
          }
        """
      out.println(contents.stripIndent().trim() + "\n")
    }

    file("${testPackage}/${controllerClassName}Test.groovy").withWriter { out ->
      def contents =
        """
          /*
           * Copyright Thoughtworks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */

          package ${packageName}

          import com.thoughtworks.go.api.spring.ApiAuthenticationHelper
          import com.thoughtworks.go.spark.ControllerTrait
          import com.thoughtworks.go.spark.SecurityServiceTrait
          import org.junit.jupiter.api.BeforeEach
          import org.junit.jupiter.api.Nested
          import org.junit.jupiter.api.Test
          import org.mockito.junit.jupiter.MockitoSettings
          import org.mockito.quality.Strictness

          @MockitoSettings(strictness = Strictness.LENIENT)
          class ${controllerClassName}Test implements SecurityServiceTrait, ControllerTrait<${controllerClassName}> {

            @Override
            ${controllerClassName} createControllerInstance() {
              new ${controllerClassName}(new ApiAuthenticationHelper(securityService, goConfigService))
            }

            @Nested
            class Index {

              @BeforeEach
              void setUp() {
                loginAsUser()
              }

              @Test
              void 'test a request'() {
              }

              @Nested
              class Security implements SecurityTestTrait, AdminUserSecurity {

                @Override
                String getControllerMethodUnderTest() {
                  return "index"
                }

                @Override
                void makeHttpCall() {
                  getWithApiHeader(controller.controllerBasePath())
                }
              }
            }
          }
        """
      out.println(contents.stripIndent().trim() + "\n")
    }

    addRoute(entityClassName, apiName)
    addPackageToSpringClasspathScanning(packageName)
    addProjectToSettingsGradle(newProjectName, it)
    addProjectToGitIgnore(newProjectName)
  }
}

tasks.register('upgradeApi') {
  description = "Helper to upgrade an new api module. Pass `-PapiName=roles-config`"

  def injected = project.objects.newInstance(Injected)
  doFirst {
    def apiName = project.apiName
    def allApiVersions = rootProject.project(':api').allprojects
      .findAll { Project eachProject -> eachProject.name.startsWith("api-${apiName}-v") }
      .collect { Project eachProject -> eachProject.name.replaceFirst("^api-${apiName}-v", "").toInteger() }

    def currentMaxApiVersion = allApiVersions.max()

    if (currentMaxApiVersion == null) {
      throw new GradleException("Unable to find any projects with path prefix `:api:api-${apiName}-v`".toString())
    }

    def oldProject = rootProject.project("api:api-${apiName}-v${currentMaxApiVersion}")
    def apiVersion = currentMaxApiVersion + 1

    def newProjectName = "api-${apiName}-v${apiVersion}"
    def moduleDir = file("api/${newProjectName}")

    def oldPackagePrefix = "com.thoughtworks.go.apiv${currentMaxApiVersion}"
    def newPackagePrefix = "com.thoughtworks.go.apiv${apiVersion}"

    def oldControllerClassSuffix = "ControllerV${currentMaxApiVersion}"
    def newControllerClassSuffix = "ControllerV${apiVersion}"
    def newPackage = newPackagePrefix

    delete(moduleDir)

    injected.fileOps.copy {
      from oldProject.projectDir
      into moduleDir

      exclude "out/**/*.*", "target/**/*.*"

      filter { String eachLine ->
        eachLine
          .replace(oldPackagePrefix, newPackagePrefix)
          .replace(oldControllerClassSuffix, newControllerClassSuffix)
          .replaceAll("ApiVersion\\.v${currentMaxApiVersion}", "ApiVersion.v${apiVersion}")
      }
      filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("unix"))

      eachFile { FileCopyDetails fcd ->
        List<String> segments = fcd.relativePath.segments
        segments.replaceAll({ String eachSegment ->
          if (eachSegment == "apiv${currentMaxApiVersion}") {
            return "apiv${apiVersion}"
          } else if (eachSegment.contains("${oldControllerClassSuffix}")) {
            if (fcd.name.endsWith("${oldControllerClassSuffix}.java")) {
              newPackage = new File(oldProject.projectDir, fcd.path).readLines().find { it.startsWith("package ${oldPackagePrefix}") }.replaceAll(/\.apiv[\d]+\./, ".apiv${apiVersion}.").replaceFirst(/^package ([\w\.\-]+);.*$/, '$1')
            }
            return eachSegment.replace(oldControllerClassSuffix, newControllerClassSuffix)
          } else {
            return eachSegment
          }
        })
        fcd.relativePath = new RelativePath(!fcd.isDirectory(), (segments as String[]))
      }
      includeEmptyDirs = false
    }

    addPackageToSpringClasspathScanning(newPackage)
    addProjectToSettingsGradle(newProjectName, it)
    addProjectToGitIgnore(newProjectName)
  }

}

private void addUrlRewriteRule(String spaName) {
  def rule =
    """
        <rule>
          <name>${spaName}</name>
          <from>^/admin/${spaName}(/?)\$</from>
          <to last="true">/spark/admin/${spaName}</to>
        </rule>
      """

  def lines = file("${project(':server').webAppDir}/WEB-INF/urlrewrite.xml").readLines()
  int insertionIdx = lines.findIndexOf { l -> (l =~ /^\s*<urlrewrite/).find() }
  lines.add(insertionIdx + 1, rule.stripIndent().trim())

  file("${project(':server').webAppDir}/WEB-INF/urlrewrite.xml").withWriter { out ->
    out.println(lines.join("\n").trim() + "\n")
  }
}

private void addRoute(String entityName, String route) {
  def lines = file('spark/spark-base/src/main/java/com/thoughtworks/go/spark/Routes.java').readLines()
  lines.add(lines.size() - 1, "\tpublic class ${entityName} {public static final String BASE = \"/admin/api/${route}\";}")

  file('spark/spark-base/src/main/java/com/thoughtworks/go/spark/Routes.java').withWriter { out ->
    out.println(lines.join("\n").trim() + "\n")
  }
}

private void addPackageToSpringClasspathScanning(String packageName) {
  def lines = file("server/src/main/resources/applicationContext-global.xml").readLines()
  def insertionIdx = lines.findIndexOf { l -> (l =~ /^\s*<context:component-scan /).find() }
  lines.add(insertionIdx, "  <context:component-scan base-package=\"${packageName}\"/>")

  file("server/src/main/resources/applicationContext-global.xml").withWriter { out ->
    out.println(lines.join("\n").trim() + "\n")
  }
}

private Object addProjectToSettingsGradle(String newProjectName, it) {
  file('settings.gradle').withWriter { out ->

    def contents =
      """
          /*
           * Copyright Thoughtworks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */
        """

    out.println(contents.stripIndent().trim())
    out.println("")
    out.println("rootProject.name = 'gocd'")
    out.println("")
    def existingProjects = rootProject.allprojects.findAll { prj -> prj.childProjects.isEmpty() && !prj.path.startsWith(":docker") }.collect {
      it.path
    }
    def newProjects = existingProjects + [":api:${newProjectName}"]
    newProjects.sort().unique().each { out.println "include '${it}'" }
    out.println("")
    out.println("apply from: 'settings-docker.gradle'")
  }
}

private void addProjectToGitIgnore(String newProjectName) {
  def ignoredFiles = ["api/${newProjectName}/out/", "api/${newProjectName}/target/", "api/${newProjectName}/logs/", "api/${newProjectName}/config/"]
  rootProject.file('.gitignore').withWriterAppend { out ->
    ignoredFiles.each { line ->
      out.println(line)
    }
  }
}
